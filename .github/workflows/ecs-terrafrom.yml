name: Terraform ECS

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform Action (apply or destroy)'
        required: false
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
          - tests

permissions:
  id-token: write
  contents: read

jobs:
  unit-tests:
    name: Run Unit Tests with Coverage
    runs-on: ubuntu-latest
    if: github.event.inputs.terraform_action == 'apply' || github.event.inputs.terraform_action == 'tests'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage

      - name: Run tests with coverage
        run: |
          coverage run --branch --source=app -m unittest discover -s tests
          coverage report -m

      - name: Upload coverage report (HTML)
        run: |
          coverage html
        continue-on-error: true

      - name: Upload HTML coverage report as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

      - name: Generate coverage.xml
        run: |
          coverage xml -o coverage.xml

      - name: Upload coverage.xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  sonar-python:
    name: Run Sonar Tests
    runs-on: self-hosted
    needs: unit-tests
    if: github.event.inputs.terraform_action == 'apply' || github.event.inputs.terraform_action == 'tests'


    steps:
      - uses: actions/checkout@v3

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-xml

      - name: Run SonarQube Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          sonar-scanner \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.qualitygate.wait=true


  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: unit-tests
    if: ${{ github.event.inputs.terraform_action == 'apply' }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Docker/Dockerfile
          push: true
          build-args: |
            CI_ID=${{ github.run_id }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/hello-szymon:${{ github.run_id }}
            ${{ secrets.DOCKERHUB_USERNAME }}/hello-szymon:latest

  docker-scan:
    name: Scan Docker Image for Vulnerabilities
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event.inputs.terraform_action == 'apply'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/hello-szymon:${{ github.run_id }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

  terraform-apply:
    name: Run Terraform Apply
    runs-on: self-hosted
    needs: docker-scan
    if: github.event.inputs.terraform_action == 'apply'

    defaults:
      run:
        working-directory: terraform

    env:
      TF_ACTION: ${{ github.event.inputs.terraform_action }}

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::954976288111:role/github-ecs-role
          aws-region: eu-west-1

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        if: env.TF_ACTION == 'apply'
        run: terraform apply -auto-approve -var "docker_image=${{ secrets.DOCKERHUB_USERNAME }}/hello-szymon:${{ github.run_id }}"

      - name: Terraform Destroy
        if: env.TF_ACTION == 'destroy'
        run: terraform destroy -auto-approve

  terraform-destroy:
    name: Run Terraform Destroy
    runs-on: self-hosted
    if: github.event.inputs.terraform_action == 'destroy'
    defaults:
      run:
        working-directory: terraform

    env:
      TF_ACTION: ${{ github.event.inputs.terraform_action }}

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::954976288111:role/github-ecs-role
          aws-region: eu-west-1

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Destroy
        if: env.TF_ACTION == 'destroy'
        run: terraform destroy -auto-approve

  post-deployment-check:
    name: Verify Deployment Response
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.event.inputs.terraform_action == 'apply'

    steps:
    - name: Wait for app to return correct CI_ID (max 5 minutes)
      shell: bash
      run: |
        echo "Waiting for http://app.ssawulski.net to return CI_ID: ${{ github.run_id }}"

        ATTEMPTS=0
        MAX_ATTEMPTS=60

        while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
          if curl -s http://app.ssawulski.net | grep -q "${{ github.run_id }}"; then
            echo "CI_ID ${{ github.run_id }} found in response."
            exit 0
          fi

          echo "Attempt $((ATTEMPTS + 1)): CI_ID not found, retrying in 5s..."
          sleep 5
          ATTEMPTS=$((ATTEMPTS + 1))
        done

        echo "CI_ID ${{ github.run_id }} not found in response after $MAX_ATTEMPTS attempts."
        exit 1
